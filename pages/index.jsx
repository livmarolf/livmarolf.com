import { Spring } from "framer-motion";
import fs from "fs";
import { GetStaticProps } from "next";
import Head from "next/head";
import Image from "next/image";
import path from "path";
import { useEffect, useRef, useState } from "react";
import useWave from "use-wave";
import { Hexagon } from "../components/hexagon";
import ProfilePhoto from "../public/images/liv.png";
import c from "../styles/Home.module.scss";
import { useMounted } from "../hooks/use-mounted";
import classNames from "classnames";
import { motion } from "framer-motion";
import { useIntersection } from "../hooks/use-intersection";
import NavBar from "../components/NavBar";
import ReCAPTCHA from "react-google-recaptcha";
import { scrollTo } from "../utils/scroll-to";

const random = (min, max) =>
  min < 0 ? min + Math.random() * (max * 2) : min + Math.random() * max;

const getPositionOffset = (factorX, factorY = factorX) => ({
  x: random(-factorX, factorX),
  y: random(-factorY, factorY),
});

const getRotation = (deg) => ({
  rotate: random(-deg, deg),
});

/**
 * @type Spring
 */
const commonSpring = {
  type: "spring",
  damping: 70,
  stiffness: 20,
};

export default function Home({ logos }) {
  const mounted = useMounted();
  const wave = useWave();
  const interval = useRef();
  const [tick, doTick] = useState(0);
  const [activeElement, setObserverTargets] = useIntersection();
  const recaptchaRef = useRef();
  const [sent, setSent] = useState(false);
  const [error, setError] = useState("");

  useEffect(() => {
    interval.current = setInterval(() => doTick(++tick), 2 * 1000);

    return () => clearInterval(interval.current);
  }, []);

  useEffect(() => {
    if (!mounted) return;

    const targets = document.querySelectorAll("section");

    setObserverTargets(targets);
  }, [mounted]);

  const onSubmit = async (e) => {
    e.preventDefault();

    const token = await recaptchaRef.current.executeAsync();

    const formData = new FormData(e.target);

    formData.set("g-recaptcha-response", token);

    const res = await fetch("/api/email", {
      method: "post",
      headers: { "content-type": "application/json" },
      body: JSON.stringify(Object.fromEntries(formData)),
    }).then((r) => r.json());

    if (res.success) {
      setSent(true);
      setError("");
    }
    if (!res.success) {
      setSent(false);
      setError(res.message ?? "An error occurred");
    }
  };

  return (
    <>
      <Head>
        <title>Olivia Marolf</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
        <link rel="preconnect" href="https://fonts.googleapis.com" />
        <link
          rel="preconnect"
          href="https://fonts.gstatic.com"
          crossOrigin="true"
        />
      </Head>

      <main className={c.main}>
        <NavBar activeElement={activeElement} />
        <section className={c.intro}>
          <Hexagon
            initial={false}
            animate={getPositionOffset(100, 70)}
            transition={commonSpring}
            className={c.hex1}
            color="#212328"
          />
          <Hexagon
            initial={false}
            animate={getPositionOffset(100, 70)}
            transition={commonSpring}
            className={c.hex2}
            color="#212328"
          />
          <svg
            className={c.hexRod1}
            viewBox="0 0 841 65"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              d="M2 36.9086L17.0001 28.3056L32 36.9086V54.0916L17.0001 62.6944L2 54.0916V36.9086Z"
              stroke="#D7D7D7"
              strokeWidth="4"
            />
            <g filter="url(#filter0_f_53_270)">
              <path
                d="M799 20.9086L814 12.3056L829 20.9086V38.0916L814 46.6944L799 38.0916V20.9086Z"
                stroke="#D7D7D7"
                strokeOpacity="0.1"
                strokeWidth="4"
              />
            </g>
            <path d="M34 45H751" stroke="#D7D7D7" strokeWidth="5" />
            <g filter="url(#filter1_f_53_270)">
              <path
                d="M80 29H797"
                stroke="#D7D7D7"
                strokeOpacity="0.1"
                strokeWidth="5"
              />
            </g>
            <defs>
              <filter
                id="filter0_f_53_270"
                x="787"
                y="0"
                width="54"
                height="59"
                filterUnits="userSpaceOnUse"
                colorInterpolationFilters="sRGB"
              >
                <feFlood floodOpacity="0" result="BackgroundImageFix" />
                <feBlend
                  mode="normal"
                  in="SourceGraphic"
                  in2="BackgroundImageFix"
                  result="shape"
                />
                <feGaussianBlur
                  stdDeviation="5"
                  result="effect1_foregroundBlur_53_270"
                />
              </filter>
              <filter
                id="filter1_f_53_270"
                x="70"
                y="16.5"
                width="737"
                height="25"
                filterUnits="userSpaceOnUse"
                colorInterpolationFilters="sRGB"
              >
                <feFlood floodOpacity="0" result="BackgroundImageFix" />
                <feBlend
                  mode="normal"
                  in="SourceGraphic"
                  in2="BackgroundImageFix"
                  result="shape"
                />
                <feGaussianBlur
                  stdDeviation="5"
                  result="effect1_foregroundBlur_53_270"
                />
              </filter>
            </defs>
          </svg>
          <header>
            <span>I AM</span>
            <h1>Olivia Marolf</h1>
            <span>â–² WEB DEVELOPER</span>
          </header>
          {/* TODO: fix resizing issue */}
          <svg
            className={c.hexRod2}
            viewBox="0 0 1294 62"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path d="M34 42L1171 43" stroke="#D7D7D7" strokeWidth="5" />
            <g filter="url(#filter0_f_0_1)">
              <path
                d="M1252 20.9086L1267 12.3056L1282 20.9086V38.0916L1267 46.6944L1252 38.0916V20.9086Z"
                stroke="#D7D7D7"
                strokeOpacity="0.1"
                strokeWidth="4"
              />
            </g>
            <g filter="url(#filter1_f_0_1)">
              <path
                d="M126 28L1250 30"
                stroke="#D7D7D7"
                strokeOpacity="0.1"
                strokeWidth="5"
              />
            </g>
            <path
              d="M2 33.9086L17.0001 25.3056L32 33.9086V51.0916L17.0001 59.6944L2 51.0916V33.9086Z"
              stroke="#D7D7D7"
              strokeWidth="4"
            />
            <defs>
              <filter
                id="filter0_f_0_1"
                x="1240"
                y="0"
                width="54"
                height="59"
                filterUnits="userSpaceOnUse"
                colorInterpolationFilters="sRGB"
              >
                <feFlood floodOpacity="0" result="BackgroundImageFix" />
                <feBlend
                  mode="normal"
                  in="SourceGraphic"
                  in2="BackgroundImageFix"
                  result="shape"
                />
                <feGaussianBlur
                  stdDeviation="5"
                  result="effect1_foregroundBlur_0_1"
                />
              </filter>
              <filter
                id="filter1_f_0_1"
                x="115.996"
                y="15.5"
                width="1144.01"
                height="27"
                filterUnits="userSpaceOnUse"
                colorInterpolationFilters="sRGB"
              >
                <feFlood floodOpacity="0" result="BackgroundImageFix" />
                <feBlend
                  mode="normal"
                  in="SourceGraphic"
                  in2="BackgroundImageFix"
                  result="shape"
                />
                <feGaussianBlur
                  stdDeviation="5"
                  result="effect1_foregroundBlur_0_1"
                />
              </filter>
            </defs>
          </svg>
          {/* TODO: jump to page */}
          <div className={c.cta}>
            <button onClick={() => scrollTo(c.about)} ref={wave}>
              ABOUT
            </button>
            <button onClick={() => scrollTo(c.contact)} ref={wave}>
              CONTACT
            </button>
          </div>
        </section>
        <section className={c.about}>
          <h2>A BIT ABOUT ME:</h2>
          <div className={c.profile}>
            <span className={c.profileWrapper}>
              <Image
                alt="Photo of Olivia Marolf"
                layout="intrinsic"
                className={c.profilePhoto}
                src={ProfilePhoto}
              />
              <svg
                className={c.profileHex1}
                viewBox="0 0 147 170"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  fillRule="evenodd"
                  clipRule="evenodd"
                  d="M73.4997 170L0 127.5L0 42.4996L73.4997 0L147 42.4996L147 127.5L73.4997 170Z"
                  fill="#222328"
                />
              </svg>
              <svg
                className={c.profileHex2}
                viewBox="0 0 438 507"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  opacity="0.6"
                  fillRule="evenodd"
                  clipRule="evenodd"
                  d="M183.499 456L23 363L23 176.999L183.499 84L344 176.999L344 363L183.499 456Z"
                  fill="#222328"
                />
                <path
                  opacity="0.4"
                  d="M2 127.904L219.001 2.31082L436 127.904V379.098L219.001 504.689L2 379.098V127.904Z"
                  stroke="#222328"
                  strokeWidth="4"
                />
              </svg>
            </span>
          </div>
          <div className={c.bio}>
            <svg
              className={c.arrow1}
              viewBox="0 0 265 113"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                d="M252.483 112.102C253.092 112.664 254.041 112.626 254.602 112.017L263.757 102.096C264.319 101.487 264.281 100.538 263.672 99.9759C263.063 99.4141 262.114 99.4523 261.552 100.061L253.415 108.88L244.596 100.743C243.987 100.181 243.038 100.219 242.476 100.828C241.914 101.437 241.952 102.386 242.561 102.948L252.483 112.102ZM0.761716 12.977C71.1375 0.50674 133.091 0.551576 177.869 15.9895C200.236 23.701 218.259 35.2325 230.937 50.9075C243.604 66.5708 251.013 86.4679 252.001 111.06L254.999 110.94C253.987 85.7821 246.39 65.2447 233.269 49.021C220.158 32.8091 201.61 21.0013 178.847 13.1533C133.363 -2.5279 70.8163 -2.48307 0.238284 10.023L0.761716 12.977Z"
                fill="#D7D7D7"
              />
            </svg>
            <p>
              As a young student, I began to take an interest in technology. I
              would spend my time teaching myself using mainly YouTube and
              documentation. After a short time, I enrolled in the Software
              Development Bootcamp at Devmountain in Lehi, UT. There I found a
              passion for web development and have continued to grow my skills
              ever since.
            </p>
            <svg
              className={c.arrow2}
              viewBox="0 0 275 234"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                d="M1.00178 232.092C1.05283 232.919 1.7645 233.548 2.59135 233.497L16.0657 232.665C16.8926 232.614 17.5215 231.903 17.4705 231.076C17.4194 230.249 16.7078 229.62 15.8809 229.671L3.90368 230.41L3.16442 218.433C3.11338 217.606 2.40171 216.977 1.57486 217.028C0.748003 217.079 0.119087 217.791 0.170128 218.618L1.00178 232.092ZM271.091 0.752878C271.09 38.4915 260.254 64.8936 242.62 85.0085C224.939 105.177 200.327 119.14 172.548 131.791C158.663 138.115 144.042 144.088 129.125 150.351C114.222 156.609 99.0434 163.148 84.1108 170.583C54.2427 185.454 25.3009 203.933 1.37495 231.007L3.62293 232.993C27.1975 206.317 55.7674 188.046 85.4478 173.269C100.29 165.879 115.394 159.37 130.287 153.117C145.166 146.87 159.853 140.87 173.792 134.522C201.661 121.829 226.759 107.652 244.876 86.9861C263.041 66.2658 274.09 39.1378 274.091 0.752881L271.091 0.752878Z"
                fill="#D7D7D7"
              />
            </svg>
          </div>
        </section>
        <section className={c.skills}>
          <h2>HERE&apos;S WHAT I KNOW:</h2>
          <svg
            className={c.arrow3}
            viewBox="0 0 99 148"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              d="M98.3951 139.204C99.0599 138.709 99.1979 137.77 98.7035 137.105L90.6465 126.273C90.1521 125.608 89.2125 125.47 88.5478 125.964C87.883 126.459 87.745 127.398 88.2394 128.063L95.4011 137.692L85.7726 144.853C85.1078 145.348 84.9698 146.287 85.4642 146.952C85.9586 147.617 86.8983 147.755 87.563 147.261L98.3951 139.204ZM5.01775 0.269428C-2.58209 49.1231 -0.782985 80.9792 13.8104 102.139C28.4321 123.341 55.5784 133.357 97.2819 139.484L97.718 136.516C56.071 130.397 30.1195 120.503 16.28 100.436C2.41216 80.3279 0.386495 49.557 7.9821 0.730572L5.01775 0.269428Z"
              fill="#D7D7D7"
            />
          </svg>
          <div className={c.logos}>
            <svg
              className={c.skillsHex1}
              viewBox="0 0 1320 1268"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                d="M3.00035 466.383L497.581 2.63783L1154.55 170.138L1316.9 801.212L822.322 1264.95L165.349 1097.46L3.00035 466.383Z"
                stroke="#D7D7D7"
                strokeWidth="4"
              />
            </svg>
            {mounted &&
              logos.map((logo) => (
                <motion.img
                  key={logo.name}
                  className={classNames(c.logo, c[logo.name])}
                  src={logo.src}
                  initial={false}
                  animate={{ ...getPositionOffset(30, 30), ...getRotation(15) }}
                  transition={commonSpring}
                />
              ))}
          </div>
        </section>
        <section className={c.contact}>
          <svg
            className={c.contactHex}
            width="855"
            height="978"
            viewBox="0 0 855 978"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
          >
            <g filter="url(#filter0_f_70_178)">
              <path
                fillRule="evenodd"
                clipRule="evenodd"
                d="M427.499 938L40 713.499L40 264.498L427.499 40L815 264.498L815 713.499L427.499 938Z"
                fill="#222328"
              />
            </g>
            <defs>
              <filter
                id="filter0_f_70_178"
                x="0"
                y="0"
                width="855"
                height="978"
                filterUnits="userSpaceOnUse"
                colorInterpolationFilters="sRGB"
              >
                <feFlood floodOpacity="0" result="BackgroundImageFix" />
                <feBlend
                  mode="normal"
                  in="SourceGraphic"
                  in2="BackgroundImageFix"
                  result="shape"
                />
                <feGaussianBlur
                  stdDeviation="20"
                  result="effect1_foregroundBlur_70_178"
                />
              </filter>
            </defs>
          </svg>

          <svg
            className={c.contactHexRod}
            width="59"
            height="928"
            viewBox="0 0 59 928"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path d="M39 34L39 557" stroke="#D7D7D7" strokeWidth="5" />
            <path
              d="M48.0914 2L56.6944 17.0001L48.0914 32L30.9084 32L22.3056 17.0001L30.9084 2L48.0914 2Z"
              stroke="#D7D7D7"
              strokeWidth="4"
            />
            <path d="M20 894L20 371" stroke="#D7D7D7" strokeWidth="5" />
            <path
              d="M10.9086 926L2.30559 911L10.9086 896H28.0916L36.6944 911L28.0916 926H10.9086Z"
              stroke="#D7D7D7"
              strokeWidth="4"
            />
          </svg>
          <div className={c.howToReachMe}>
            <h2>HOW TO REACH ME</h2>
            <ul>
              <li>
                PHONE: <a href="tel:+18018858122">(801) 885-8122</a>
              </li>
              <li>
                EMAIL:{" "}
                <a href="mailto:livmarolf@gmail.com">livmarolf@gmail.com</a>
              </li>
              <li>
                GITHUB:{" "}
                <a
                  noopener
                  target="_blank"
                  href="https://github.com/livmarolf/"
                  rel="noreferrer"
                >
                  github.com/livmarolf/
                </a>
              </li>
              <li>
                LINKEDIN:{" "}
                <a
                  noopener
                  target="_blank"
                  href="https://linkedin.com/in/oliviamarolf/"
                  rel="noreferrer"
                >
                  linkedin.com/in/oliviamarolf/
                </a>
              </li>
            </ul>
            <h3>DOWNLOAD DOCUMENTS</h3>
            <ul>
              <li>
                <a target="_blank" href="/docs/Olivia-Marolf-Resume.pdf">
                  Resume
                </a>
              </li>
              <li>
                <a
                  target="_blank"
                  href="/docs/Olivia-Marolf-Recommendation-Letter.pdf"
                >
                  Recommendation Letter
                </a>
              </li>
              <li>
                <a
                  target="_blank"
                  href="/docs/Olivia-Marolf-Devmountain-Certificate.pdf"
                >
                  Devmountain Certificate
                </a>
              </li>
            </ul>
          </div>
          <div className={c.getInTouch}>
            <h2>GET IN TOUCH</h2>
            {error && <h3>{error}</h3>}
            {sent ? (
              <h3>Message Sent!</h3>
            ) : (
              <form action="#" onSubmit={onSubmit}>
                <label>
                  <span>NAME</span>
                  <input required type="text" name="name" />
                </label>
                <label>
                  <span>EMAIL</span>
                  <input required type="email" name="email" />
                </label>
                <label>
                  <span>PHONE NUMBER</span>
                  <input required type="text" name="phoneNumber" />
                </label>
                <label>
                  <span>MESSAGE</span>
                  <textarea required name="message" />
                </label>
                <span className={c.recaptcha}>
                  <ReCAPTCHA
                    ref={recaptchaRef}
                    badge="inline"
                    theme="dark"
                    size="invisible"
                    sitekey="6LdMSmcfAAAAAA_qK40slJz0grwG4dXqwrcgXclT"
                  />
                </span>
                <button className={c.submitButton} type="submit" ref={wave}>
                  SUBMIT
                </button>
              </form>
            )}
          </div>
        </section>
      </main>
    </>
  );
}

/**
 * @type GetStaticProps
 */
export async function getStaticProps() {
  const logoDir = path.join(process.cwd(), "public/images/logos");
  const logoFiles = fs.readdirSync(logoDir);
  const logos = [];

  const getQualifiedPath = (file) => `/images/logos/${file}`;

  logoFiles.forEach((file) => {
    logos.push({
      src: getQualifiedPath(file),
      name: file.toLowerCase().replaceAll(".svg", "").replaceAll(".", "-"),
    });
  });

  return {
    props: {
      logos,
    },
  };
}
